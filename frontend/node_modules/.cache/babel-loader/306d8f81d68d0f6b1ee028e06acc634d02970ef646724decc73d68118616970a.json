{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\SCHOOL MANAGEMENT SYSTEM 2\\\\frontend\\\\src\\\\pages\\\\admin\\\\StudentPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport StudentDetails from '../../components/StudentDetails';\nimport StudentForm from '../../components/StudentForm';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentPage = () => {\n  _s();\n  const [students, setStudents] = useState([]);\n\n  // Fetch all students\n  useEffect(() => {\n    const fetchStudents = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/student');\n        const data = await response.json();\n        if (response.ok) {\n          setStudents(data);\n        } else {\n          console.error('Failed to fetch students:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching students:', error);\n      }\n    };\n    fetchStudents();\n  }, []);\n\n  // Handle delete student\n  const handleDelete = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/student/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        // Remove the deleted student from the state\n        setStudents(students.filter(student => student._id !== id));\n      } else {\n        console.error('Failed to delete student');\n      }\n    } catch (error) {\n      console.error('Error deleting student:', error);\n    }\n  };\n\n  // Handle update student\n  const handleUpdate = async id => {\n    const updatedStudent = {\n      name: 'Updated Name',\n      // Replace with actual updated data\n      rollNum: 'Updated Roll Number',\n      // Replace with actual updated data\n      sclassName: 'Updated Class' // Replace with actual updated data\n    };\n    try {\n      const response = await fetch(`http://localhost:5000/api/student/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedStudent)\n      });\n      if (response.ok) {\n        const updatedData = await response.json();\n        setStudents(students.map(student => student._id === id ? updatedData : student));\n      } else {\n        console.error('Failed to update student:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error updating student:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Student Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"student-list\",\n      children: students.map(student => /*#__PURE__*/_jsxDEV(StudentDetails, {\n        student: student,\n        onDelete: handleDelete,\n        onUpdate: handleUpdate\n      }, student._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StudentForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(StudentPage, \"Xxsbsc/n21pueGlfwfykfeIEF1E=\");\n_c = StudentPage;\nexport default StudentPage;\nvar _c;\n$RefreshReg$(_c, \"StudentPage\");","map":{"version":3,"names":["React","useEffect","useState","StudentDetails","StudentForm","jsxDEV","_jsxDEV","StudentPage","_s","students","setStudents","fetchStudents","response","fetch","data","json","ok","console","error","handleDelete","id","method","filter","student","_id","handleUpdate","updatedStudent","name","rollNum","sclassName","headers","body","JSON","stringify","updatedData","map","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onDelete","onUpdate","_c","$RefreshReg$"],"sources":["E:/PROJECT/SCHOOL MANAGEMENT SYSTEM 2/frontend/src/pages/admin/StudentPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport StudentDetails from '../../components/StudentDetails';\r\nimport StudentForm from '../../components/StudentForm';\r\nimport './style.css';\r\n\r\nconst StudentPage = () => {\r\n    const [students, setStudents] = useState([]);\r\n\r\n    // Fetch all students\r\n    useEffect(() => {\r\n        const fetchStudents = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/student');\r\n                const data = await response.json();\r\n                if (response.ok) {\r\n                    setStudents(data);\r\n                } else {\r\n                    console.error('Failed to fetch students:', data);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching students:', error);\r\n            }\r\n        };\r\n\r\n        fetchStudents();\r\n    }, []);\r\n\r\n    // Handle delete student\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/student/${id}`, {\r\n                method: 'DELETE',\r\n            });\r\n\r\n            if (response.ok) {\r\n                // Remove the deleted student from the state\r\n                setStudents(students.filter((student) => student._id !== id));\r\n            } else {\r\n                console.error('Failed to delete student');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting student:', error);\r\n        }\r\n    };\r\n\r\n    // Handle update student\r\n    const handleUpdate = async (id) => {\r\n        const updatedStudent = {\r\n            name: 'Updated Name', // Replace with actual updated data\r\n            rollNum: 'Updated Roll Number', // Replace with actual updated data\r\n            sclassName: 'Updated Class', // Replace with actual updated data\r\n        };\r\n    \r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/student/${id}`, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(updatedStudent),\r\n            });\r\n    \r\n            if (response.ok) {\r\n                const updatedData = await response.json();\r\n                setStudents(students.map((student) =>\r\n                    student._id === id ? updatedData : student\r\n                ));\r\n            } else {\r\n                console.error('Failed to update student:', await response.json());\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating student:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Student Details</h2>\r\n            <div className=\"student-list\">\r\n                {students.map((student) => (\r\n                    <StudentDetails\r\n                        key={student._id}\r\n                        student={student}\r\n                        onDelete={handleDelete}\r\n                        onUpdate={handleUpdate}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <StudentForm />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StudentPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}