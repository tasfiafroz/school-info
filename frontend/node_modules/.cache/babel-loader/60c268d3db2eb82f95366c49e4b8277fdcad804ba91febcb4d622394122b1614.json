{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\SCHOOL MANAGEMENT SYSTEM 2\\\\frontend\\\\src\\\\pages\\\\admin\\\\StudentPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport StudentDetails from '../../components/StudentDetails';\nimport StudentForm from '../../components/StudentForm';\nimport './style.css';\nimport Sidebar from '../../components/AdminNav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentPage = () => {\n  _s();\n  const [students, setStudents] = useState([]);\n  const [selectedStudent, setSelectedStudent] = useState(null); // Track selected student for update\n\n  // Fetch all students\n  useEffect(() => {\n    const fetchStudents = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/student');\n        const data = await response.json();\n        if (response.ok) {\n          setStudents(data);\n        } else {\n          console.error('Failed to fetch students:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching students:', error);\n      }\n    };\n    fetchStudents();\n  }, []);\n\n  // Handle delete student\n  const handleDelete = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/student/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setStudents(students.filter(student => student._id !== id));\n      } else {\n        console.error('Failed to delete student');\n      }\n    } catch (error) {\n      console.error('Error deleting student:', error);\n    }\n  };\n\n  // Handle update button click\n  const handleUpdateClick = student => {\n    setSelectedStudent(student); // Set the selected student for update\n  };\n\n  // Handle form submission for update\n  const handleUpdateSubmit = async updatedStudent => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/student/${updatedStudent._id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedStudent)\n      });\n      if (response.ok) {\n        const updatedData = await response.json();\n        // Update the student in the state\n        setStudents(students.map(student => student._id === updatedData._id ? updatedData : student));\n        setSelectedStudent(null); // Close the form after update\n      } else {\n        console.error('Failed to update student:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error updating student:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stu\",\n      children: [/*#__PURE__*/_jsxDEV(StudentForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Student Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"student-list\",\n        children: students.map(student => /*#__PURE__*/_jsxDEV(StudentDetails, {\n          student: student,\n          onDelete: handleDelete,\n          onUpdate: () => handleUpdateClick(student) // Pass the student to update\n        }, student._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), selectedStudent && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Update Student\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const updatedStudent = {\n              _id: selectedStudent._id,\n              name: formData.get('name'),\n              rollNum: formData.get('rollNum'),\n              sclassName: formData.get('sclassName')\n            };\n            handleUpdateSubmit(updatedStudent);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              defaultValue: selectedStudent.name,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Roll Number:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"rollNum\",\n              defaultValue: selectedStudent.rollNum,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Class:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"sclassName\",\n              defaultValue: selectedStudent.sclassName,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setSelectedStudent(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(StudentPage, \"O+0xts80IUB1Nh4cM3bAWCde6us=\");\n_c = StudentPage;\nexport default StudentPage;\nvar _c;\n$RefreshReg$(_c, \"StudentPage\");","map":{"version":3,"names":["React","useEffect","useState","StudentDetails","StudentForm","Sidebar","jsxDEV","_jsxDEV","StudentPage","_s","students","setStudents","selectedStudent","setSelectedStudent","fetchStudents","response","fetch","data","json","ok","console","error","handleDelete","id","method","filter","student","_id","handleUpdateClick","handleUpdateSubmit","updatedStudent","headers","body","JSON","stringify","updatedData","map","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onDelete","onUpdate","onSubmit","e","preventDefault","formData","FormData","target","name","get","rollNum","sclassName","type","defaultValue","required","onClick","_c","$RefreshReg$"],"sources":["E:/PROJECT/SCHOOL MANAGEMENT SYSTEM 2/frontend/src/pages/admin/StudentPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport StudentDetails from '../../components/StudentDetails';\r\nimport StudentForm from '../../components/StudentForm';\r\nimport './style.css';\r\nimport Sidebar from '../../components/AdminNav';\r\n\r\nconst StudentPage = () => {\r\n    const [students, setStudents] = useState([]);\r\n    const [selectedStudent, setSelectedStudent] = useState(null); // Track selected student for update\r\n\r\n    // Fetch all students\r\n    useEffect(() => {\r\n        const fetchStudents = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/student');\r\n                const data = await response.json();\r\n                if (response.ok) {\r\n                    setStudents(data);\r\n                } else {\r\n                    console.error('Failed to fetch students:', data);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching students:', error);\r\n            }\r\n        };\r\n\r\n        fetchStudents();\r\n    }, []);\r\n\r\n    // Handle delete student\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/student/${id}`, {\r\n                method: 'DELETE',\r\n            });\r\n\r\n            if (response.ok) {\r\n                setStudents(students.filter((student) => student._id !== id));\r\n            } else {\r\n                console.error('Failed to delete student');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting student:', error);\r\n        }\r\n    };\r\n\r\n    // Handle update button click\r\n    const handleUpdateClick = (student) => {\r\n        setSelectedStudent(student); // Set the selected student for update\r\n    };\r\n\r\n    // Handle form submission for update\r\n    const handleUpdateSubmit = async (updatedStudent) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/student/${updatedStudent._id}`, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(updatedStudent),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const updatedData = await response.json();\r\n                // Update the student in the state\r\n                setStudents(students.map((student) =>\r\n                    student._id === updatedData._id ? updatedData : student\r\n                ));\r\n                setSelectedStudent(null); // Close the form after update\r\n            } else {\r\n                console.error('Failed to update student:', await response.json());\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating student:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Sidebar />\r\n        <div className='stu'>\r\n            <StudentForm />\r\n            <h2>Student Details</h2>\r\n            <div className=\"student-list\">\r\n                {students.map((student) => (\r\n                    <StudentDetails\r\n                        key={student._id}\r\n                        student={student}\r\n                        onDelete={handleDelete}\r\n                        onUpdate={() => handleUpdateClick(student)} // Pass the student to update\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            {/* Update Form */}\r\n            {selectedStudent && (\r\n                <div className=\"update-form\">\r\n                    <h3>Update Student</h3>\r\n                    <form\r\n                        onSubmit={(e) => {\r\n                            e.preventDefault();\r\n                            const formData = new FormData(e.target);\r\n                            const updatedStudent = {\r\n                                _id: selectedStudent._id,\r\n                                name: formData.get('name'),\r\n                                rollNum: formData.get('rollNum'),\r\n                                sclassName: formData.get('sclassName'),\r\n                            };\r\n                            handleUpdateSubmit(updatedStudent);\r\n                        }}\r\n                    >\r\n                        <label>\r\n                            Name:\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                defaultValue={selectedStudent.name}\r\n                                required\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            Roll Number:\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"rollNum\"\r\n                                defaultValue={selectedStudent.rollNum}\r\n                                required\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            Class:\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"sclassName\"\r\n                                defaultValue={selectedStudent.sclassName}\r\n                                required\r\n                            />\r\n                        </label>\r\n                        <button type=\"submit\">Save</button>\r\n                        <button type=\"button\" onClick={() => setSelectedStudent(null)}>\r\n                            Cancel\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n\r\n            \r\n        </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StudentPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}