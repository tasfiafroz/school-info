{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\SCHOOL MANAGEMENT SYSTEM 2\\\\frontend\\\\src\\\\pages\\\\admin\\\\StudentPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import StudentDetails from '../../components/StudentDetails';\n// import StudentForm from '../../components/StudentForm';\n// import './style.css';\n// import Sidebar from '../../components/AdminNav';\n\n// const StudentPage = () => {\n//     const [students, setStudents] = useState([]);\n//     const [selectedStudent, setSelectedStudent] = useState(null); // Track selected student for update\n\n//     // Fetch all students\n//     useEffect(() => {\n//         const fetchStudents = async () => {\n//             try {\n//                 const response = await fetch('http://localhost:5000/api/student');\n//                 const data = await response.json();\n//                 if (response.ok) {\n//                     setStudents(data);\n//                 } else {\n//                     console.error('Failed to fetch students:', data);\n//                 }\n//             } catch (error) {\n//                 console.error('Error fetching students:', error);\n//             }\n//         };\n\n//         fetchStudents();\n//     }, []);\n\n//     // Handle delete student\n//     const handleDelete = async (id) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/api/student/${id}`, {\n//                 method: 'DELETE',\n//             });\n\n//             if (response.ok) {\n//                 setStudents(students.filter((student) => student._id !== id));\n//             } else {\n//                 console.error('Failed to delete student');\n//             }\n//         } catch (error) {\n//             console.error('Error deleting student:', error);\n//         }\n//     };\n\n//     // Handle update button click\n//     const handleUpdateClick = (student) => {\n//         setSelectedStudent(student); // Set the selected student for update\n//     };\n\n//     // Handle form submission for update\n//     const handleUpdateSubmit = async (updatedStudent) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/api/student/${updatedStudent._id}`, {\n//                 method: 'PATCH',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify(updatedStudent),\n//             });\n\n//             if (response.ok) {\n//                 const updatedData = await response.json();\n//                 // Update the student in the state\n//                 setStudents(students.map((student) =>\n//                     student._id === updatedData._id ? updatedData : student\n//                 ));\n//                 setSelectedStudent(null); // Close the form after update\n//             } else {\n//                 console.error('Failed to update student:', await response.json());\n//             }\n//         } catch (error) {\n//             console.error('Error updating student:', error);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <Sidebar />\n//             <div>\n//                 <StudentForm />\n//                 <div className='stu'>\n//                     <h2>Student Details</h2>\n//                     <div className=\"student-list\">\n//                         {students.map((student) => (\n//                             <StudentDetails\n//                                 key={student._id}\n//                                 student={student}\n//                                 onDelete={handleDelete}\n//                                 onUpdate={() => handleUpdateClick(student)} // Pass the student to update\n//                             />\n//                         ))}\n//                     </div>\n\n//                     {/* Update Form */}\n//                     {selectedStudent && (\n//                         <div className=\"update-form\">\n//                             <h3>Update Student</h3>\n//                             <form\n//                                 onSubmit={(e) => {\n//                                     e.preventDefault();\n//                                     const formData = new FormData(e.target);\n//                                     const updatedStudent = {\n//                                         _id: selectedStudent._id,\n//                                         name: formData.get('name'),\n//                                         Fname: formData.get('Fname'),\n//                                         Mname: formData.get('Mname'),\n//                                         mobile: formData.get('mobile'),\n//                                         rollNum: formData.get('rollNum'),\n//                                         sclassName: formData.get('sclassName'),\n//                                         gender: formData.get('gender'),\n//                                     };\n//                                     handleUpdateSubmit(updatedStudent);\n//                                 }}\n//                             >\n//                                 <label>\n//                                     Name:\n//                                     <input\n//                                         type=\"text\"\n//                                         name=\"name\"\n//                                         defaultValue={selectedStudent.name}\n//                                         required\n//                                     />\n//                                 </label>\n//                                 <label>\n//                                     Father's Name:\n//                                     <input\n//                                         type=\"text\"\n//                                         name=\"Fname\"\n//                                         defaultValue={selectedStudent.Fname}\n//                                     />\n//                                 </label>\n//                                 <label>\n//                                     Mother's Name:\n//                                     <input\n//                                         type=\"text\"\n//                                         name=\"Mname\"\n//                                         defaultValue={selectedStudent.Mname}\n//                                     />\n//                                 </label>\n//                                 <label>\n//                                     Mobile:\n//                                     <input\n//                                         type=\"text\"\n//                                         name=\"mobile\"\n//                                         defaultValue={selectedStudent.mobile}\n//                                     />\n//                                 </label>\n//                                 <label>\n//                                     Roll Number:\n//                                     <input\n//                                         type=\"text\"\n//                                         name=\"rollNum\"\n//                                         defaultValue={selectedStudent.rollNum}\n//                                         required\n//                                     />\n//                                 </label>\n//                                 <label>\n//                                     Class:\n//                                     <input\n//                                         type=\"text\"\n//                                         name=\"sclassName\"\n//                                         defaultValue={selectedStudent.sclassName}\n//                                         required\n//                                     />\n//                                 </label>\n//                                 <label>\n//                                     Gender:\n//                                     <input\n//                                         type=\"text\"\n//                                         name=\"gender\"\n//                                         defaultValue={selectedStudent.gender}\n//                                     />\n//                                 </label>\n//                                 <button type=\"submit\">Save</button>\n//                                 <button type=\"button\" onClick={() => setSelectedStudent(null)}>\n//                                     Cancel\n//                                 </button>\n//                             </form>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default StudentPage;\n\nimport React, { useEffect, useState } from 'react';\nimport StudentForm from '../../components/StudentForm';\nimport './style.css';\nimport Sidebar from '../../components/AdminNav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentPage = () => {\n  _s();\n  const [students, setStudents] = useState([]);\n  const [selectedStudent, setSelectedStudent] = useState(null); // Track selected student for update\n\n  // Fetch all students\n  useEffect(() => {\n    const fetchStudents = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/student');\n        const data = await response.json();\n        if (response.ok) {\n          setStudents(data);\n        } else {\n          console.error('Failed to fetch students:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching students:', error);\n      }\n    };\n    fetchStudents();\n  }, []);\n\n  // Handle delete student\n  const handleDelete = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/student/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setStudents(students.filter(student => student._id !== id));\n      } else {\n        console.error('Failed to delete student');\n      }\n    } catch (error) {\n      console.error('Error deleting student:', error);\n    }\n  };\n\n  // Handle update button click\n  const handleUpdateClick = student => {\n    setSelectedStudent(student); // Set the selected student for update\n  };\n\n  // Handle form submission for update\n  const handleUpdateSubmit = async updatedStudent => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/student/${updatedStudent._id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedStudent)\n      });\n      if (response.ok) {\n        const updatedData = await response.json();\n        // Update the student in the state\n        setStudents(students.map(student => student._id === updatedData._id ? updatedData : student));\n        setSelectedStudent(null); // Close the form after update\n      } else {\n        console.error('Failed to update student:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error updating student:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(StudentForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stu\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Student Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"student-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Father's Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Mother's Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Mobile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Roll No.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Class\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Gender\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: students.map(student => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: student.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: student.Fname\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: student.Mname\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: student.mobile\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: student.rollNum\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: student.sclassName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: student.gender\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"action-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-btn\",\n                  onClick: () => handleUpdateClick(student),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete-btn\",\n                  onClick: () => handleDelete(student._id),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 37\n              }, this)]\n            }, student._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), selectedStudent && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"update-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Update Student\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => {\n              e.preventDefault();\n              const formData = new FormData(e.target);\n              const updatedStudent = {\n                _id: selectedStudent._id,\n                name: formData.get('name'),\n                Fname: formData.get('Fname'),\n                Mname: formData.get('Mname'),\n                mobile: formData.get('mobile'),\n                rollNum: formData.get('rollNum'),\n                sclassName: formData.get('sclassName'),\n                gender: formData.get('gender')\n              };\n              handleUpdateSubmit(updatedStudent);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"name\",\n                defaultValue: selectedStudent.name,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Father's Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"Fname\",\n                defaultValue: selectedStudent.Fname\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Mother's Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"Mname\",\n                defaultValue: selectedStudent.Mname\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Mobile:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"mobile\",\n                defaultValue: selectedStudent.mobile\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Roll Number:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"rollNum\",\n                defaultValue: selectedStudent.rollNum,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Class:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"sclassName\",\n                defaultValue: selectedStudent.sclassName,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Gender:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"gender\",\n                defaultValue: selectedStudent.gender\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setSelectedStudent(null),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 9\n  }, this);\n};\n_s(StudentPage, \"O+0xts80IUB1Nh4cM3bAWCde6us=\");\n_c = StudentPage;\nexport default StudentPage;\nvar _c;\n$RefreshReg$(_c, \"StudentPage\");","map":{"version":3,"names":["React","useEffect","useState","StudentForm","Sidebar","jsxDEV","_jsxDEV","StudentPage","_s","students","setStudents","selectedStudent","setSelectedStudent","fetchStudents","response","fetch","data","json","ok","console","error","handleDelete","id","method","filter","student","_id","handleUpdateClick","handleUpdateSubmit","updatedStudent","headers","body","JSON","stringify","updatedData","map","children","fileName","_jsxFileName","lineNumber","columnNumber","className","name","Fname","Mname","mobile","rollNum","sclassName","gender","onClick","onSubmit","e","preventDefault","formData","FormData","target","get","type","defaultValue","required","_c","$RefreshReg$"],"sources":["E:/PROJECT/SCHOOL MANAGEMENT SYSTEM 2/frontend/src/pages/admin/StudentPage.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import StudentDetails from '../../components/StudentDetails';\r\n// import StudentForm from '../../components/StudentForm';\r\n// import './style.css';\r\n// import Sidebar from '../../components/AdminNav';\r\n\r\n// const StudentPage = () => {\r\n//     const [students, setStudents] = useState([]);\r\n//     const [selectedStudent, setSelectedStudent] = useState(null); // Track selected student for update\r\n\r\n//     // Fetch all students\r\n//     useEffect(() => {\r\n//         const fetchStudents = async () => {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:5000/api/student');\r\n//                 const data = await response.json();\r\n//                 if (response.ok) {\r\n//                     setStudents(data);\r\n//                 } else {\r\n//                     console.error('Failed to fetch students:', data);\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Error fetching students:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchStudents();\r\n//     }, []);\r\n\r\n//     // Handle delete student\r\n//     const handleDelete = async (id) => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:5000/api/student/${id}`, {\r\n//                 method: 'DELETE',\r\n//             });\r\n\r\n//             if (response.ok) {\r\n//                 setStudents(students.filter((student) => student._id !== id));\r\n//             } else {\r\n//                 console.error('Failed to delete student');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error deleting student:', error);\r\n//         }\r\n//     };\r\n\r\n//     // Handle update button click\r\n//     const handleUpdateClick = (student) => {\r\n//         setSelectedStudent(student); // Set the selected student for update\r\n//     };\r\n\r\n//     // Handle form submission for update\r\n//     const handleUpdateSubmit = async (updatedStudent) => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:5000/api/student/${updatedStudent._id}`, {\r\n//                 method: 'PATCH',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify(updatedStudent),\r\n//             });\r\n\r\n//             if (response.ok) {\r\n//                 const updatedData = await response.json();\r\n//                 // Update the student in the state\r\n//                 setStudents(students.map((student) =>\r\n//                     student._id === updatedData._id ? updatedData : student\r\n//                 ));\r\n//                 setSelectedStudent(null); // Close the form after update\r\n//             } else {\r\n//                 console.error('Failed to update student:', await response.json());\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error updating student:', error);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <Sidebar />\r\n//             <div>\r\n//                 <StudentForm />\r\n//                 <div className='stu'>\r\n//                     <h2>Student Details</h2>\r\n//                     <div className=\"student-list\">\r\n//                         {students.map((student) => (\r\n//                             <StudentDetails\r\n//                                 key={student._id}\r\n//                                 student={student}\r\n//                                 onDelete={handleDelete}\r\n//                                 onUpdate={() => handleUpdateClick(student)} // Pass the student to update\r\n//                             />\r\n//                         ))}\r\n//                     </div>\r\n\r\n//                     {/* Update Form */}\r\n//                     {selectedStudent && (\r\n//                         <div className=\"update-form\">\r\n//                             <h3>Update Student</h3>\r\n//                             <form\r\n//                                 onSubmit={(e) => {\r\n//                                     e.preventDefault();\r\n//                                     const formData = new FormData(e.target);\r\n//                                     const updatedStudent = {\r\n//                                         _id: selectedStudent._id,\r\n//                                         name: formData.get('name'),\r\n//                                         Fname: formData.get('Fname'),\r\n//                                         Mname: formData.get('Mname'),\r\n//                                         mobile: formData.get('mobile'),\r\n//                                         rollNum: formData.get('rollNum'),\r\n//                                         sclassName: formData.get('sclassName'),\r\n//                                         gender: formData.get('gender'),\r\n//                                     };\r\n//                                     handleUpdateSubmit(updatedStudent);\r\n//                                 }}\r\n//                             >\r\n//                                 <label>\r\n//                                     Name:\r\n//                                     <input\r\n//                                         type=\"text\"\r\n//                                         name=\"name\"\r\n//                                         defaultValue={selectedStudent.name}\r\n//                                         required\r\n//                                     />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Father's Name:\r\n//                                     <input\r\n//                                         type=\"text\"\r\n//                                         name=\"Fname\"\r\n//                                         defaultValue={selectedStudent.Fname}\r\n//                                     />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Mother's Name:\r\n//                                     <input\r\n//                                         type=\"text\"\r\n//                                         name=\"Mname\"\r\n//                                         defaultValue={selectedStudent.Mname}\r\n//                                     />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Mobile:\r\n//                                     <input\r\n//                                         type=\"text\"\r\n//                                         name=\"mobile\"\r\n//                                         defaultValue={selectedStudent.mobile}\r\n//                                     />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Roll Number:\r\n//                                     <input\r\n//                                         type=\"text\"\r\n//                                         name=\"rollNum\"\r\n//                                         defaultValue={selectedStudent.rollNum}\r\n//                                         required\r\n//                                     />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Class:\r\n//                                     <input\r\n//                                         type=\"text\"\r\n//                                         name=\"sclassName\"\r\n//                                         defaultValue={selectedStudent.sclassName}\r\n//                                         required\r\n//                                     />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Gender:\r\n//                                     <input\r\n//                                         type=\"text\"\r\n//                                         name=\"gender\"\r\n//                                         defaultValue={selectedStudent.gender}\r\n//                                     />\r\n//                                 </label>\r\n//                                 <button type=\"submit\">Save</button>\r\n//                                 <button type=\"button\" onClick={() => setSelectedStudent(null)}>\r\n//                                     Cancel\r\n//                                 </button>\r\n//                             </form>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default StudentPage;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport StudentForm from '../../components/StudentForm';\r\nimport './style.css';\r\nimport Sidebar from '../../components/AdminNav';\r\n\r\nconst StudentPage = () => {\r\n    const [students, setStudents] = useState([]);\r\n    const [selectedStudent, setSelectedStudent] = useState(null); // Track selected student for update\r\n\r\n    // Fetch all students\r\n    useEffect(() => {\r\n        const fetchStudents = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/student');\r\n                const data = await response.json();\r\n                if (response.ok) {\r\n                    setStudents(data);\r\n                } else {\r\n                    console.error('Failed to fetch students:', data);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching students:', error);\r\n            }\r\n        };\r\n\r\n        fetchStudents();\r\n    }, []);\r\n\r\n    // Handle delete student\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/student/${id}`, {\r\n                method: 'DELETE',\r\n            });\r\n\r\n            if (response.ok) {\r\n                setStudents(students.filter((student) => student._id !== id));\r\n            } else {\r\n                console.error('Failed to delete student');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting student:', error);\r\n        }\r\n    };\r\n\r\n    // Handle update button click\r\n    const handleUpdateClick = (student) => {\r\n        setSelectedStudent(student); // Set the selected student for update\r\n    };\r\n\r\n    // Handle form submission for update\r\n    const handleUpdateSubmit = async (updatedStudent) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/student/${updatedStudent._id}`, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(updatedStudent),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const updatedData = await response.json();\r\n                // Update the student in the state\r\n                setStudents(students.map((student) =>\r\n                    student._id === updatedData._id ? updatedData : student\r\n                ));\r\n                setSelectedStudent(null); // Close the form after update\r\n            } else {\r\n                console.error('Failed to update student:', await response.json());\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating student:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Sidebar />\r\n            <div>\r\n                <StudentForm />\r\n                <div className=\"stu\">\r\n                    <h2>Student Details</h2>\r\n                    <table className=\"student-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Father's Name</th>\r\n                                <th>Mother's Name</th>\r\n                                <th>Mobile</th>\r\n                                <th>Roll No.</th>\r\n                                <th>Class</th>\r\n                                <th>Gender</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {students.map((student) => (\r\n                                <tr key={student._id}>\r\n                                    <td>{student.name}</td>\r\n                                    <td>{student.Fname}</td>\r\n                                    <td>{student.Mname}</td>\r\n                                    <td>{student.mobile}</td>\r\n                                    <td>{student.rollNum}</td>\r\n                                    <td>{student.sclassName}</td>\r\n                                    <td>{student.gender}</td>\r\n                                    <td className=\"action-buttons\">\r\n                                        <button className=\"edit-btn\" onClick={() => handleUpdateClick(student)}>Edit</button>\r\n                                        <button className=\"delete-btn\" onClick={() => handleDelete(student._id)}>Delete</button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    {/* Update Form */}\r\n                    {selectedStudent && (\r\n                        <div className=\"update-form\">\r\n                            <h3>Update Student</h3>\r\n                            <form\r\n                                onSubmit={(e) => {\r\n                                    e.preventDefault();\r\n                                    const formData = new FormData(e.target);\r\n                                    const updatedStudent = {\r\n                                        _id: selectedStudent._id,\r\n                                        name: formData.get('name'),\r\n                                        Fname: formData.get('Fname'),\r\n                                        Mname: formData.get('Mname'),\r\n                                        mobile: formData.get('mobile'),\r\n                                        rollNum: formData.get('rollNum'),\r\n                                        sclassName: formData.get('sclassName'),\r\n                                        gender: formData.get('gender'),\r\n                                    };\r\n                                    handleUpdateSubmit(updatedStudent);\r\n                                }}\r\n                            >\r\n                                <label>\r\n                                    Name:\r\n                                    <input type=\"text\" name=\"name\" defaultValue={selectedStudent.name} required />\r\n                                </label>\r\n                                <label>\r\n                                    Father's Name:\r\n                                    <input type=\"text\" name=\"Fname\" defaultValue={selectedStudent.Fname} />\r\n                                </label>\r\n                                <label>\r\n                                    Mother's Name:\r\n                                    <input type=\"text\" name=\"Mname\" defaultValue={selectedStudent.Mname} />\r\n                                </label>\r\n                                <label>\r\n                                    Mobile:\r\n                                    <input type=\"text\" name=\"mobile\" defaultValue={selectedStudent.mobile} />\r\n                                </label>\r\n                                <label>\r\n                                    Roll Number:\r\n                                    <input type=\"text\" name=\"rollNum\" defaultValue={selectedStudent.rollNum} required />\r\n                                </label>\r\n                                <label>\r\n                                    Class:\r\n                                    <input type=\"text\" name=\"sclassName\" defaultValue={selectedStudent.sclassName} required />\r\n                                </label>\r\n                                <label>\r\n                                    Gender:\r\n                                    <input type=\"text\" name=\"gender\" defaultValue={selectedStudent.gender} />\r\n                                </label>\r\n                                <button type=\"submit\">Save</button>\r\n                                <button type=\"button\" onClick={() => setSelectedStudent(null)}>Cancel</button>\r\n                            </form>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StudentPage;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}