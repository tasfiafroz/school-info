{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\SCHOOL MANAGEMENT SYSTEM 2\\\\frontend\\\\src\\\\pages\\\\admin\\\\TeacherPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import TeacherForm from '../../components/TeacherForm';\n// import TeacherDetails from '../../components/TeacherDetails';\n// import './style.css';\n// import Sidebar from '../../components/AdminNav';\n\n// const TeacherPage = () => {\n//     const [teachers, setTeachers] = useState([]);\n//     const [selectedTeacher, setSelectedTeacher] = useState(null); // For update functionality\n\n//     // Fetch all teachers\n//     useEffect(() => {\n//         const fetchTeachers = async () => {\n//             try {\n//                 const response = await fetch('http://localhost:5000/api/teacher');\n//                 const json = await response.json();\n\n//                 if (response.ok) {\n//                     setTeachers(json);\n//                 } else {\n//                     console.error('Failed to fetch teacher details:', json);\n//                 }\n//             } catch (error) {\n//                 console.error('Error fetching teacher details:', error);\n//             }\n//         };\n\n//         fetchTeachers();\n//     }, []);\n\n//     // Handle delete teacher\n//     const handleDelete = async (id) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/api/teacher/${id}`, {\n//                 method: 'DELETE',\n//             });\n\n//             if (response.ok) {\n//                 setTeachers(teachers.filter((teacher) => teacher._id !== id));\n//             } else {\n//                 console.error('Failed to delete teacher');\n//             }\n//         } catch (error) {\n//             console.error('Error deleting teacher:', error);\n//         }\n//     };\n\n//     // Handle update teacher\n//     const handleUpdate = async (id, updatedData) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/api/teacher/${id}`, {\n//                 method: 'PATCH',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify(updatedData),\n//             });\n\n//             if (response.ok) {\n//                 const updatedTeacher = await response.json();\n//                 setTeachers(teachers.map((teacher) =>\n//                     teacher._id === id ? updatedTeacher : teacher\n//                 ));\n//                 setSelectedTeacher(null); // Close the update form\n//             } else {\n//                 console.error('Failed to update teacher:', await response.json());\n//             }\n//         } catch (error) {\n//             console.error('Error updating teacher:', error);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <Sidebar />\n//             <div>\n//                 <TeacherForm />\n//                 <div className='tea'>\n//                     <h2>Teacher Details</h2>\n//                     <div className='class'>\n//                         {teachers.map((teacher) => (\n//                             <TeacherDetails\n//                                 key={teacher._id}\n//                                 teacher={teacher}\n//                                 onDelete={() => handleDelete(teacher._id)}\n//                                 onUpdate={() => setSelectedTeacher(teacher)}\n//                             />\n//                         ))}\n//                     </div>\n\n//                     {/* Update Form */}\n//                     {selectedTeacher && (\n//                         <div className=\"update-formT\">\n//                             <h3>Update Teacher</h3>\n//                             <form\n//                                 onSubmit={(e) => {\n//                                     e.preventDefault();\n//                                     const formData = new FormData(e.target);\n//                                     const updatedData = {\n//                                         name: formData.get('name'),\n//                                         email: formData.get('email'),\n//                                         teachSubject: formData.get('teachSubject'),\n//                                         dob: formData.get('dob'),\n//                                         JoinDate: formData.get('JoinDate'),\n//                                         mobile: formData.get('mobile'),\n//                                         address: formData.get('address'),\n//                                     };\n//                                     handleUpdate(selectedTeacher._id, updatedData);\n//                                 }}\n//                             >\n//                                 <label>\n//                                     Name:\n//                                     <input type=\"text\" name=\"name\" defaultValue={selectedTeacher.name} required />\n//                                 </label>\n//                                 <label>\n//                                     Email:\n//                                     <input type=\"email\" name=\"email\" defaultValue={selectedTeacher.email} required />\n//                                 </label>\n//                                 <label>\n//                                     Subject:\n//                                     <input type=\"text\" name=\"teachSubject\" defaultValue={selectedTeacher.teachSubject} required />\n//                                 </label>\n//                                 <label>\n//                                     Date of Birth:\n//                                     <input type=\"date\" name=\"dob\" defaultValue={selectedTeacher.dob ? selectedTeacher.dob.split('T')[0] : ''} />\n//                                 </label>\n//                                 <label>\n//                                     Join Date:\n//                                     <input type=\"date\" name=\"JoinDate\" defaultValue={selectedTeacher.JoinDate ? selectedTeacher.JoinDate.split('T')[0] : ''} />\n//                                 </label>\n//                                 <label>\n//                                     Mobile:\n//                                     <input type=\"number\" name=\"mobile\" defaultValue={selectedTeacher.mobile || ''} />\n//                                 </label>\n//                                 <label>\n//                                     Address:\n//                                     <input type=\"text\" name=\"address\" defaultValue={selectedTeacher.address || ''} />\n//                                 </label>\n//                                 <button type=\"submit\">Save</button>\n//                                 <button type=\"button\" onClick={() => setSelectedTeacher(null)}>Cancel</button>\n//                             </form>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TeacherPage;\n\nimport React, { useEffect, useState } from 'react';\nimport TeacherForm from '../../components/TeacherForm';\nimport './style.css';\nimport Sidebar from '../../components/AdminNav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeacherPage = () => {\n  _s();\n  const [teachers, setTeachers] = useState([]);\n  const [selectedTeacher, setSelectedTeacher] = useState(null); // For update functionality\n\n  // Fetch all teachers\n  useEffect(() => {\n    const fetchTeachers = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/teacher');\n        const json = await response.json();\n        if (response.ok) {\n          setTeachers(json);\n        } else {\n          console.error('Failed to fetch teacher details:', json);\n        }\n      } catch (error) {\n        console.error('Error fetching teacher details:', error);\n      }\n    };\n    fetchTeachers();\n  }, []);\n\n  // Handle delete teacher\n  const handleDelete = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/teacher/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setTeachers(teachers.filter(teacher => teacher._id !== id));\n      } else {\n        console.error('Failed to delete teacher');\n      }\n    } catch (error) {\n      console.error('Error deleting teacher:', error);\n    }\n  };\n\n  // Handle update teacher\n  const handleUpdate = async (id, updatedData) => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/teacher/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedData)\n      });\n      if (response.ok) {\n        const updatedTeacher = await response.json();\n        setTeachers(teachers.map(teacher => teacher._id === id ? updatedTeacher : teacher));\n        setSelectedTeacher(null); // Close the update form\n      } else {\n        console.error('Failed to update teacher:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error updating teacher:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TeacherForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tea\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Teacher Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"class\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"teacher-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Subject\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Date of Birth\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Join Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Mobile\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: teachers.map(teacher => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: teacher.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: teacher.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: teacher.teachSubject\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: teacher.dob ? new Date(teacher.dob).toLocaleDateString() : 'N/A'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: teacher.JoinDate ? new Date(teacher.JoinDate).toLocaleDateString() : 'N/A'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: teacher.mobile || 'N/A'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: teacher.address || 'N/A'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"action-buttons\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"edit-btn\",\n                    onClick: () => setSelectedTeacher(teacher),\n                    children: \"Edit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 257,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"details-btn\",\n                    children: \"Details\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"delete-btn\",\n                    onClick: () => handleDelete(teacher._id),\n                    children: \"Delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 259,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 41\n                }, this)]\n              }, teacher._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), selectedTeacher && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"update-formT\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Update Teacher\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => {\n              e.preventDefault();\n              const formData = new FormData(e.target);\n              const updatedData = {\n                name: formData.get('name'),\n                email: formData.get('email'),\n                teachSubject: formData.get('teachSubject'),\n                dob: formData.get('dob'),\n                JoinDate: formData.get('JoinDate'),\n                mobile: formData.get('mobile'),\n                address: formData.get('address')\n              };\n              handleUpdate(selectedTeacher._id, updatedData);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"name\",\n                defaultValue: selectedTeacher.name,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                name: \"email\",\n                defaultValue: selectedTeacher.email,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Subject:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"teachSubject\",\n                defaultValue: selectedTeacher.teachSubject,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Date of Birth:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                name: \"dob\",\n                defaultValue: selectedTeacher.dob ? selectedTeacher.dob.split('T')[0] : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Join Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                name: \"JoinDate\",\n                defaultValue: selectedTeacher.JoinDate ? selectedTeacher.JoinDate.split('T')[0] : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Mobile:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"mobile\",\n                defaultValue: selectedTeacher.mobile || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"address\",\n                defaultValue: selectedTeacher.address || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setSelectedTeacher(null),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 9\n  }, this);\n};\n_s(TeacherPage, \"o7L2aOmtan6NBjcYgoK5piQl4Uc=\");\n_c = TeacherPage;\nexport default TeacherPage;\nvar _c;\n$RefreshReg$(_c, \"TeacherPage\");","map":{"version":3,"names":["React","useEffect","useState","TeacherForm","Sidebar","jsxDEV","_jsxDEV","TeacherPage","_s","teachers","setTeachers","selectedTeacher","setSelectedTeacher","fetchTeachers","response","fetch","json","ok","console","error","handleDelete","id","method","filter","teacher","_id","handleUpdate","updatedData","headers","body","JSON","stringify","updatedTeacher","map","children","fileName","_jsxFileName","lineNumber","columnNumber","className","name","email","teachSubject","dob","Date","toLocaleDateString","JoinDate","mobile","address","onClick","onSubmit","e","preventDefault","formData","FormData","target","get","type","defaultValue","required","split","_c","$RefreshReg$"],"sources":["E:/PROJECT/SCHOOL MANAGEMENT SYSTEM 2/frontend/src/pages/admin/TeacherPage.js"],"sourcesContent":["\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import TeacherForm from '../../components/TeacherForm';\r\n// import TeacherDetails from '../../components/TeacherDetails';\r\n// import './style.css';\r\n// import Sidebar from '../../components/AdminNav';\r\n\r\n// const TeacherPage = () => {\r\n//     const [teachers, setTeachers] = useState([]);\r\n//     const [selectedTeacher, setSelectedTeacher] = useState(null); // For update functionality\r\n\r\n//     // Fetch all teachers\r\n//     useEffect(() => {\r\n//         const fetchTeachers = async () => {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:5000/api/teacher');\r\n//                 const json = await response.json();\r\n\r\n//                 if (response.ok) {\r\n//                     setTeachers(json);\r\n//                 } else {\r\n//                     console.error('Failed to fetch teacher details:', json);\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Error fetching teacher details:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchTeachers();\r\n//     }, []);\r\n\r\n//     // Handle delete teacher\r\n//     const handleDelete = async (id) => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:5000/api/teacher/${id}`, {\r\n//                 method: 'DELETE',\r\n//             });\r\n\r\n//             if (response.ok) {\r\n//                 setTeachers(teachers.filter((teacher) => teacher._id !== id));\r\n//             } else {\r\n//                 console.error('Failed to delete teacher');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error deleting teacher:', error);\r\n//         }\r\n//     };\r\n\r\n//     // Handle update teacher\r\n//     const handleUpdate = async (id, updatedData) => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:5000/api/teacher/${id}`, {\r\n//                 method: 'PATCH',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify(updatedData),\r\n//             });\r\n\r\n//             if (response.ok) {\r\n//                 const updatedTeacher = await response.json();\r\n//                 setTeachers(teachers.map((teacher) =>\r\n//                     teacher._id === id ? updatedTeacher : teacher\r\n//                 ));\r\n//                 setSelectedTeacher(null); // Close the update form\r\n//             } else {\r\n//                 console.error('Failed to update teacher:', await response.json());\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error updating teacher:', error);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <Sidebar />\r\n//             <div>\r\n//                 <TeacherForm />\r\n//                 <div className='tea'>\r\n//                     <h2>Teacher Details</h2>\r\n//                     <div className='class'>\r\n//                         {teachers.map((teacher) => (\r\n//                             <TeacherDetails\r\n//                                 key={teacher._id}\r\n//                                 teacher={teacher}\r\n//                                 onDelete={() => handleDelete(teacher._id)}\r\n//                                 onUpdate={() => setSelectedTeacher(teacher)}\r\n//                             />\r\n//                         ))}\r\n//                     </div>\r\n\r\n//                     {/* Update Form */}\r\n//                     {selectedTeacher && (\r\n//                         <div className=\"update-formT\">\r\n//                             <h3>Update Teacher</h3>\r\n//                             <form\r\n//                                 onSubmit={(e) => {\r\n//                                     e.preventDefault();\r\n//                                     const formData = new FormData(e.target);\r\n//                                     const updatedData = {\r\n//                                         name: formData.get('name'),\r\n//                                         email: formData.get('email'),\r\n//                                         teachSubject: formData.get('teachSubject'),\r\n//                                         dob: formData.get('dob'),\r\n//                                         JoinDate: formData.get('JoinDate'),\r\n//                                         mobile: formData.get('mobile'),\r\n//                                         address: formData.get('address'),\r\n//                                     };\r\n//                                     handleUpdate(selectedTeacher._id, updatedData);\r\n//                                 }}\r\n//                             >\r\n//                                 <label>\r\n//                                     Name:\r\n//                                     <input type=\"text\" name=\"name\" defaultValue={selectedTeacher.name} required />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Email:\r\n//                                     <input type=\"email\" name=\"email\" defaultValue={selectedTeacher.email} required />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Subject:\r\n//                                     <input type=\"text\" name=\"teachSubject\" defaultValue={selectedTeacher.teachSubject} required />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Date of Birth:\r\n//                                     <input type=\"date\" name=\"dob\" defaultValue={selectedTeacher.dob ? selectedTeacher.dob.split('T')[0] : ''} />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Join Date:\r\n//                                     <input type=\"date\" name=\"JoinDate\" defaultValue={selectedTeacher.JoinDate ? selectedTeacher.JoinDate.split('T')[0] : ''} />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Mobile:\r\n//                                     <input type=\"number\" name=\"mobile\" defaultValue={selectedTeacher.mobile || ''} />\r\n//                                 </label>\r\n//                                 <label>\r\n//                                     Address:\r\n//                                     <input type=\"text\" name=\"address\" defaultValue={selectedTeacher.address || ''} />\r\n//                                 </label>\r\n//                                 <button type=\"submit\">Save</button>\r\n//                                 <button type=\"button\" onClick={() => setSelectedTeacher(null)}>Cancel</button>\r\n//                             </form>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default TeacherPage;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport TeacherForm from '../../components/TeacherForm';\r\nimport './style.css';\r\nimport Sidebar from '../../components/AdminNav';\r\n\r\nconst TeacherPage = () => {\r\n    const [teachers, setTeachers] = useState([]);\r\n    const [selectedTeacher, setSelectedTeacher] = useState(null); // For update functionality\r\n\r\n    // Fetch all teachers\r\n    useEffect(() => {\r\n        const fetchTeachers = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/teacher');\r\n                const json = await response.json();\r\n\r\n                if (response.ok) {\r\n                    setTeachers(json);\r\n                } else {\r\n                    console.error('Failed to fetch teacher details:', json);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching teacher details:', error);\r\n            }\r\n        };\r\n\r\n        fetchTeachers();\r\n    }, []);\r\n\r\n    // Handle delete teacher\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/teacher/${id}`, {\r\n                method: 'DELETE',\r\n            });\r\n\r\n            if (response.ok) {\r\n                setTeachers(teachers.filter((teacher) => teacher._id !== id));\r\n            } else {\r\n                console.error('Failed to delete teacher');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting teacher:', error);\r\n        }\r\n    };\r\n\r\n    // Handle update teacher\r\n    const handleUpdate = async (id, updatedData) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/teacher/${id}`, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(updatedData),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const updatedTeacher = await response.json();\r\n                setTeachers(teachers.map((teacher) =>\r\n                    teacher._id === id ? updatedTeacher : teacher\r\n                ));\r\n                setSelectedTeacher(null); // Close the update form\r\n            } else {\r\n                console.error('Failed to update teacher:', await response.json());\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating teacher:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Sidebar />\r\n            <div>\r\n                <TeacherForm />\r\n                <div className=\"tea\">\r\n                    <h2>Teacher Details</h2>\r\n                    <div className=\"class\">\r\n                        <table className=\"teacher-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Subject</th>\r\n                                    <th>Date of Birth</th>\r\n                                    <th>Join Date</th>\r\n                                    <th>Mobile</th>\r\n                                    <th>Address</th>\r\n                                    <th>Actions</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {teachers.map((teacher) => (\r\n                                    <tr key={teacher._id}>\r\n                                        <td>{teacher.name}</td>\r\n                                        <td>{teacher.email}</td>\r\n                                        <td>{teacher.teachSubject}</td>\r\n                                        <td>{teacher.dob ? new Date(teacher.dob).toLocaleDateString() : 'N/A'}</td>\r\n                                        <td>{teacher.JoinDate ? new Date(teacher.JoinDate).toLocaleDateString() : 'N/A'}</td>\r\n                                        <td>{teacher.mobile || 'N/A'}</td>\r\n                                        <td>{teacher.address || 'N/A'}</td>\r\n                                        <td className=\"action-buttons\">\r\n                                            <button className=\"edit-btn\" onClick={() => setSelectedTeacher(teacher)}>Edit</button>\r\n                                            <button className=\"details-btn\">Details</button>\r\n                                            <button className=\"delete-btn\" onClick={() => handleDelete(teacher._id)}>Delete</button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* Update Form */}\r\n                    {selectedTeacher && (\r\n                        <div className=\"update-formT\">\r\n                            <h3>Update Teacher</h3>\r\n                            <form\r\n                                onSubmit={(e) => {\r\n                                    e.preventDefault();\r\n                                    const formData = new FormData(e.target);\r\n                                    const updatedData = {\r\n                                        name: formData.get('name'),\r\n                                        email: formData.get('email'),\r\n                                        teachSubject: formData.get('teachSubject'),\r\n                                        dob: formData.get('dob'),\r\n                                        JoinDate: formData.get('JoinDate'),\r\n                                        mobile: formData.get('mobile'),\r\n                                        address: formData.get('address'),\r\n                                    };\r\n                                    handleUpdate(selectedTeacher._id, updatedData);\r\n                                }}\r\n                            >\r\n                                <label>\r\n                                    Name:\r\n                                    <input type=\"text\" name=\"name\" defaultValue={selectedTeacher.name} required />\r\n                                </label>\r\n                                <label>\r\n                                    Email:\r\n                                    <input type=\"email\" name=\"email\" defaultValue={selectedTeacher.email} required />\r\n                                </label>\r\n                                <label>\r\n                                    Subject:\r\n                                    <input type=\"text\" name=\"teachSubject\" defaultValue={selectedTeacher.teachSubject} required />\r\n                                </label>\r\n                                <label>\r\n                                    Date of Birth:\r\n                                    <input type=\"date\" name=\"dob\" defaultValue={selectedTeacher.dob ? selectedTeacher.dob.split('T')[0] : ''} />\r\n                                </label>\r\n                                <label>\r\n                                    Join Date:\r\n                                    <input type=\"date\" name=\"JoinDate\" defaultValue={selectedTeacher.JoinDate ? selectedTeacher.JoinDate.split('T')[0] : ''} />\r\n                                </label>\r\n                                <label>\r\n                                    Mobile:\r\n                                    <input type=\"number\" name=\"mobile\" defaultValue={selectedTeacher.mobile || ''} />\r\n                                </label>\r\n                                <label>\r\n                                    Address:\r\n                                    <input type=\"text\" name=\"address\" defaultValue={selectedTeacher.address || ''} />\r\n                                </label>\r\n                                <button type=\"submit\">Save</button>\r\n                                <button type=\"button\" onClick={() => setSelectedTeacher(null)}>Cancel</button>\r\n                            </form>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TeacherPage;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}